{"version":3,"sources":["Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","_ref","trigger","react_default","a","createElement","id","class","align","method","action","type","name","required","placeholder","list","value","App","document","querySelector","_this2","this","BrowserRouter","basename","Switch","Route","path","concat","process","component","Components_Home_Home","exact","window","location","style","textAlign","paddingTop","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRA6BeA,SA1BF,SAAAC,GAAiBA,EAAdC,QACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,MAAM,aACnBJ,EAAAC,EAAAC,cAAA,MAAIC,GAAG,MAAP,gBAAyBH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,OAAT,MAAzB,cACAH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,OACTJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,SAASC,MAAM,UACxBL,EAAAC,EAAAC,cAAA,QAAMI,OAAO,OAAOC,OAAO,2CACzBP,EAAAC,EAAAC,cAAA,OAAKE,MAAM,cACTJ,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,YAAYC,UAAQ,EAACN,MAAM,eAAeO,YAAY,mBAAmBR,GAAG,OACpGH,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WAAWC,KAAK,iBAAiBC,UAAQ,EAACN,MAAM,eAAeO,YAAY,WAAWR,GAAG,OACrGH,EAAAC,EAAAC,cAAA,SAAOU,KAAK,YAAYH,KAAK,kBAAkBC,UAAQ,EAACN,MAAM,YAAYO,YAAY,YAAYR,GAAG,OACrGH,EAAAC,EAAAC,cAAA,YAAUC,GAAG,aACXH,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,QACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,QACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,QACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,SAEFb,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASJ,MAAM,kBAA5B,2CCOCU,oNApBbf,QAAU,WACRgB,SAASC,cAAc,OAAOH,MAAQ,GACtCE,SAASC,cAAc,OAAOH,MAAQ,GACtCE,SAASC,cAAc,OAAOH,MAAQ,4EAG/B,IAAAI,EAAAC,KACP,OACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAeC,SAAS,SACtBpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAI,GAAAC,OAAKC,QAAL,KAAgCC,UAAW,WAAQ,OAAQ1B,EAAAC,EAAAC,cAACyB,EAAD,CAAM5B,QAASkB,EAAKlB,WAAkB6B,OAAK,IACjH5B,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAI,GAAAC,OAAKC,QAAL,SAAoCC,UAAW,WAAiE,OAAzDG,OAAOC,SAAW,sCAA8C,QAClI9B,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAI,GAAAC,OAAKC,QAAL,SAAoCC,UAAW,WAAiE,OAAzDG,OAAOC,SAAW,sCAA8C,QAClI9B,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOI,UAAW,WAAQ,OAAQ1B,EAAAC,EAAAC,cAAA,MAAI6B,MAAO,CAAEC,UAAW,SAAUC,WAAY,SAA9C,qCAf1BC,cCOEC,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASzB,SAAS0B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a14e53ee.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Home.css';\r\n\r\nconst Home = ({ trigger }) => {\r\n  return (\r\n    <div id=\"home\" class=\"container\">\r\n      <h3 id=\"u1\">Welcome To fl<span id=\"u11\">ai</span> Downloads</h3>\r\n      <div class=\"row\">\r\n        <div class=\"col-12\" align=\"center\">\r\n          <form method=\"post\" action=\"https://flai-api.herokuapp.com/download\" >\r\n            <div class=\"form-group\">\r\n              <input type=\"text\" name=\"user[url]\" required class=\"form-control\" placeholder=\"Downloadable URL\" id=\"u2\" />\r\n              <input type=\"password\" name=\"user[password]\" required class=\"form-control\" placeholder=\"Password\" id=\"u3\" />\r\n              <input list=\"extension\" name=\"user[extension]\" required class=\"extension\" placeholder=\"Extension\" id=\"u4\" />\r\n              <datalist id=\"extension\" >\r\n                <option value=\".zip\">.zip</option>\r\n                <option value=\".mp4\">.mp4</option>\r\n                <option value=\".mkv\">.mkv</option>\r\n                <option value=\".mp3\">.mp3</option>\r\n              </datalist>\r\n              <button type=\"submit\" class=\"btn btn-danger\">Download</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport Home from './Components/Home/Home.js'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  trigger = () => {\r\n    document.querySelector('#u2').value = '';\r\n    document.querySelector('#u3').value = '';\r\n    document.querySelector('#u4').value = '';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter basename=\"/flai\" >\r\n        <Switch>\r\n          <Route path={`${process.env.PUBLIC_URL}/`} component={() => { return( <Home trigger={this.trigger} /> ) } } exact />\r\n          <Route path={`${process.env.PUBLIC_URL}/play`} component={() => { window.location = 'https://flai-api.herokuapp.com/play'; return null; } } />\r\n          <Route path={`${process.env.PUBLIC_URL}/link`} component={() => { window.location = 'https://flai-api.herokuapp.com/link'; return null; } } />\r\n          <Route component={() => { return (<h1 style={{ textAlign: 'center', paddingTop: '40vh' }}>Error 404: Not Found!</h1>) }} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}